/* i2c - Example

   For other examples please check:
   https://github.com/espressif/esp-idf/tree/master/examples

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/
#include <stdio.h>
#include <string.h>
#include "driver/i2c.h"
#include "driver/gpio.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

/**
 * TEST CODE BRIEF
 *
 * This example will show you how to use I2C module by running two tasks on i2c bus:
 *
 * - read external i2c sensor, here we use a BH1750 light sensor(GY-30 module) for instance.
 * - Use one I2C port(master mode) to read or write the other I2C port(slave mode) on one ESP32 chip.
 *
 * Pin assignment:
 *
 * - slave :
 *    GPIO25 is assigned as the data signal of i2c slave port
 *    GPIO26 is assigned as the clock signal of i2c slave port
 * - master:
 *    GPIO18 is assigned as the data signal of i2c master port
 *    GPIO19 is assigned as the clock signal of i2c master port
 *
 * Connection:
 *
 * - connect GPIO18 with GPIO25
 * - connect GPIO19 with GPIO26
 * - connect sda/scl of sensor with GPIO18/GPIO19
 * - no need to add external pull-up resistors, driver will enable internal pull-up resistors.
 *
 * Test items:
 *
 * - read the sensor data, if connected.
 * - i2c master(ESP32) will write data to i2c slave(ESP32).
 * - i2c master(ESP32) will read data from i2c slave(ESP32).
 */

#define DATA_LENGTH                        512              /*!<Data buffer length for test buffer*/
#define RW_TEST_LENGTH                     129              /*!<Data length for r/w test, any value from 0-DATA_LENGTH*/
#define DELAY_TIME_BETWEEN_ITEMS_MS        1234             /*!< delay time between different test items */

#define I2C_EXAMPLE_SLAVE_SCL_IO           26               /*!<gpio number for i2c slave clock  */
#define I2C_EXAMPLE_SLAVE_SDA_IO           25               /*!<gpio number for i2c slave data */
#define I2C_EXAMPLE_SLAVE_NUM              I2C_NUM_0        /*!<I2C port number for slave dev */
#define I2C_EXAMPLE_SLAVE_TX_BUF_LEN       (2*DATA_LENGTH)  /*!<I2C slave tx buffer size */
#define I2C_EXAMPLE_SLAVE_RX_BUF_LEN       (2*DATA_LENGTH)  /*!<I2C slave rx buffer size */

#define I2C_EXAMPLE_MASTER_SCL_IO          15               /*!< gpio number for I2C master clock */
#define I2C_EXAMPLE_MASTER_SDA_IO          4               /*!< gpio number for I2C master data  */
#define I2C_EXAMPLE_MASTER_NUM             I2C_NUM_1        /*!< I2C port number for master dev */
#define I2C_EXAMPLE_MASTER_TX_BUF_DISABLE  0                /*!< I2C master do not need buffer */
#define I2C_EXAMPLE_MASTER_RX_BUF_DISABLE  0                /*!< I2C master do not need buffer */
#define I2C_EXAMPLE_MASTER_FREQ_HZ         1000000           /*!< I2C master clock frequency */

#define BH1750_SENSOR_ADDR                 0x23             /*!< slave address for BH1750 sensor */
#define BH1750_CMD_START                   0x23             /*!< Command to set measure mode */
#define ESP_SLAVE_ADDR                     0x28             /*!< ESP32 slave address, you can set any 7bit value */
#define WRITE_BIT                          I2C_MASTER_WRITE /*!< I2C master write */
#define READ_BIT                           I2C_MASTER_READ  /*!< I2C master read */
#define ACK_CHECK_EN                       0x1              /*!< I2C master will check ack from slave*/
#define ACK_CHECK_DIS                      0x0              /*!< I2C master will not check ack from slave */
#define ACK_VAL                            0x0              /*!< I2C ack value */
#define NACK_VAL                           0x1              /*!< I2C nack value */


#define DISPLAY_I2C_ADDRESS 0x3C


#define SSD1306_SETCONTRAST 0x81
#define SSD1306_DISPLAYALLON_RESUME 0xA4
#define SSD1306_DISPLAYALLON 0xA5
#define SSD1306_NORMALDISPLAY 0xA6
#define SSD1306_INVERTDISPLAY 0xA7
#define SSD1306_DISPLAYOFF 0xAE
#define SSD1306_DISPLAYON 0xAF

#define SSD1306_SETDISPLAYOFFSET 0xD3
#define SSD1306_SETCOMPINS 0xDA

#define SSD1306_SETVCOMDETECT 0xDB

#define SSD1306_SETDISPLAYCLOCKDIV 0xD5
#define SSD1306_SETPRECHARGE 0xD9

#define SSD1306_SETMULTIPLEX 0xA8

#define SSD1306_SETLOWCOLUMN 0x00
#define SSD1306_SETHIGHCOLUMN 0x10

#define SSD1306_SETSTARTLINE 0x40

#define SSD1306_MEMORYMODE 0x20

#define SSD1306_COMSCANINC 0xC0
#define SSD1306_COMSCANDEC 0xC8

#define SSD1306_SEGREMAP 0xA0

#define SSD1306_CHARGEPUMP 0x8D

#define SSD1306_EXTERNALVCC 0x1
#define SSD1306_SWITCHCAPVCC 0x2

// Scrolling #defines
#define SSD1306_ACTIVATE_SCROLL 0x2F
#define SSD1306_DEACTIVATE_SCROLL 0x2E
#define SSD1306_SET_VERTICAL_SCROLL_AREA 0xA3
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

#include "display_controller.h"

static DisplayControllerConfig_t *config;
static DisplayControllerState_t state;

void displayTask(void *arg);
/**
 * @brief Test code to write esp-i2c-slave
 *        Master device write data to slave(both esp32),
 *        the data will be stored in slave buffer.
 *        We can read them out from slave buffer.
 *
 * ___________________________________________________________________
 * | start | slave_addr + wr_bit + ack | write n bytes + ack  | stop |
 * --------|---------------------------|----------------------|------|
 *
 */
esp_err_t i2c_command(i2c_port_t i2c_num, uint8_t addr, uint8_t* data_wr, size_t size)
{
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, ( addr << 1 ) | WRITE_BIT, ACK_CHECK_EN);
    i2c_master_write(cmd, data_wr, size, ACK_CHECK_EN);
    i2c_master_stop(cmd);
    esp_err_t ret = i2c_master_cmd_begin(i2c_num, cmd, 1000 / portTICK_RATE_MS);
    i2c_cmd_link_delete(cmd);
    return ret;
}


static void i2c_init()
{
    int i2c_master_port = 0;
    i2c_config_t conf;
    esp_err_t err;
    conf.mode = I2C_MODE_MASTER;
    conf.sda_io_num = 4;
    conf.sda_pullup_en = GPIO_PULLUP_ENABLE;
    conf.scl_io_num = 15;
    conf.scl_pullup_en = GPIO_PULLUP_ENABLE;
    conf.master.clk_speed = I2C_EXAMPLE_MASTER_FREQ_HZ;
    ESP_ERROR_CHECK(i2c_param_config(i2c_master_port, &conf));
    err = i2c_driver_install(i2c_master_port, conf.mode,
                       32,
                       128*128, 0);

    if( err != ESP_OK)
    {
        printf("i2c error: %d\n", err);
    }
}

void ssd1306_command(uint8_t data)
{
    uint16_t cmd = data << 8;
    esp_err_t err = i2c_command(0, DISPLAY_I2C_ADDRESS, (uint8_t*)&cmd, sizeof(cmd));
    if( err != ESP_OK)
    {
        printf("i2c cmd: %X error: %d\n`", data, err);
    } 
}

void displayClear()
{
    memset(state.frameBuffer.buffer, 0, sizeof(state.frameBuffer.buffer));
}

#define ON_PIXEL 0x01
#define OFF_PIXEL 0x00

void displayDrawLine(int sx, int sy, int ex, int ey, int pixel)
{
    int dx = ex - sx;
    int dy = ey - sy;
    float ratio = (float)dx/dy;
    float error = -0.5f;
    int x = sx, y = sy;

    while(x < ex)
    {
        if( error > 0)
        {
            ++y;
            error -= 1;
        }
        displayDraw(x, y, pixel);
        ++x;
        error += ratio;
    }
}

void displayDraw(int x, int y, int pixel)
{
    uint16_t pos = ((uint16_t)y) + (x >> 3) * DISPLAY_WIDTH ;

    if(pixel == OFF_PIXEL)
        state.frameBuffer.buffer[pos] &= ~(ON_PIXEL << (y%8));
    else
        state.frameBuffer.buffer[pos] |= ON_PIXEL << (y%8);
}

void displayUpdate()
{
    ssd1306_command(SSD1306_SETLOWCOLUMN | 0x0);  // low col = 0
    ssd1306_command(SSD1306_SETHIGHCOLUMN | 0x0);  // hi col = 0
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0); // line #0

    //displayClear();

    state.frameBuffer.header = 0x40;
    i2c_command(0, DISPLAY_I2C_ADDRESS, &state.frameBuffer.header, sizeof(state.frameBuffer));

    //ssd1306_command(DISPLAY_WIDTH-1);
}

void displayTask(void* arg)
{
    uint8_t c=0;
    while (1) 
    {
        vTaskDelay(100/portTICK_PERIOD_MS);
    }
}


void displayInit(DisplayControllerConfig_t *info)
{
    config = info;

// set gpio pin 16 to high to enable screen (heltec board)
    gpio_config_t io_conf;
    //disable interrupt
    io_conf.intr_type = GPIO_PIN_INTR_DISABLE;
    //set as output mode
    io_conf.mode = GPIO_MODE_OUTPUT;
    //bit mask of the pins that you want to set,e.g.GPIO18/19
    io_conf.pin_bit_mask = GPIO_SEL_16;
    //disable pull-down mode
    io_conf.pull_down_en = 0;
    //disable pull-up mode
    io_conf.pull_up_en = 1;
    //configure GPIO with the given settings
    gpio_config(&io_conf);

    gpio_set_level(GPIO_NUM_16, 1);

    i2c_init();


    ssd1306_command(cmd, (OLED_I2C_ADDRESS << 1) | I2C_MASTER_WRITE, true);
	ssd1306_command(cmd, OLED_CONTROL_BYTE_CMD_STREAM, true);

	ssd1306_command(SSD1306_CHARGEPUMP);
	ssd1306_command(0x14);

	ssd1306_command(SSD1306_SEGREMAP | 0x0); // reverse left-right mapping
	ssd1306_command(SSD1306_COMSCANDEC); // reverse up-bottom mapping

	ssd1306_command(SSD1306_DISPLAYON);


//     ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
// //    ssd1306_command(0x00);//---set low column address
// //    ssd1306_command(0x10);//---set high column address
//     ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
//     ssd1306_command(0x80);                                  // the suggested ratio 0x80
//     ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
//     ssd1306_command(0x3F);
//     ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
//     ssd1306_command(0x0);                                   // no offset
//     ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
//     ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
//     // internal vcc
//     ssd1306_command(0x14);
//     ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
//     ssd1306_command(0x00);                                  // 0x0 act like ks0108
//     ssd1306_command(SSD1306_SEGREMAP | 0x0);
//     ssd1306_command(SSD1306_COMSCANDEC);
//     ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
//     ssd1306_command(0x12);
//     ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81


//     // ssd1306_command(0x0da); ssd1306_command(0x012);		/* com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5) */
//     // ssd1306_command(0x081); ssd1306_command(0x0ef);		/* [2] set contrast control,  */
//     // ssd1306_command(0x0d9); ssd1306_command(0x0a1);		/* [2] pre-charge period 0x022/f1*/
//     // ssd1306_command(0x0db); ssd1306_command(0x000);		/* vcomh deselect level 0x000 .. 0x070, low nibble always 0 */
//     // // if vcomh is 0, then this will give the biggest range for contrast control issue #98
  
//     // ssd1306_command(0x02e);				/* Deactivate scroll */ 
//     // ssd1306_command(0x0a4);				/* output ram to display */
//     // ssd1306_command(0x0a6);

//     // internal vcc
//     ssd1306_command(0xCF);
//     ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
//     // internal vcc
//     ssd1306_command(0xF1);
//     ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
//     ssd1306_command(0x40);
//     ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
//     ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
    
//     ssd1306_command(0xb0);
//     ssd1306_command(0x10);
//     ssd1306_command(0x01);//Set original position to (0,0)  
    
    ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel

    //ssd1306_command(SSD1306_INVERTDISPLAY);

//    xTaskCreate(displayTask, "display_i2c", 1024 * 2, NULL, 10, NULL);
}

// void app_main()
// {
//     i2c_example_slave_init();
//     xTaskCreate(i2c_test_task, "display_i2c", 1024 * 2, (void* ) 1, 10, NULL);
// }

